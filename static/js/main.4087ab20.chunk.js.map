{"version":3,"sources":["components/house/house.js","components/wizard/wizard.jsx","components/card/card.js","components/navbar/navbar.js","components/filter/filter.jsx","App.js","serviceWorker.js","index.js"],"names":["houseSelector","houseName","House","props","house","alt","src","Wizard","name","school","dumbledoresArmy","Card","className","Navbar","Filter","onChange","event","target","value","wizards","bloodStatus","App","useState","filteredWizards","setFilter","filteredList","filter","wizard","toLowerCase","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0RAGMA,G,YAAgB,SAAAC,GACpB,OAAQA,GACN,IAAK,aACH,MAAO,sIACT,IAAK,YACH,MAAO,8HACT,IAAK,aACH,MAAO,8HACT,IAAK,YACH,MAAO,4JAET,QACE,MAAO,6IAkBEC,EAfD,SAAAC,GAAU,IACdC,EAAUD,EAAVC,MAER,OACE,oCACE,4CAAkBA,GAClB,yBAAKC,IAAG,UAAKD,EAAL,WAAqBE,IAAKN,EAAcI,OCSvCG,G,MA5BA,SAAAJ,GAAU,IACfK,EAAyCL,EAAzCK,KAAMC,EAAmCN,EAAnCM,OAAQL,EAA2BD,EAA3BC,MAAOM,EAAoBP,EAApBO,gBAE7B,OACE,oCACE,4BAAKF,GAHY,+CAKhBC,EACC,kBAAC,EAAD,CAAOL,MAAOA,IAEd,yBACEC,IAAI,oBACJC,IAAI,+FAGR,2BACGI,EAAe,oDCTTC,EARF,SAAAR,GACX,OACE,6BAASS,UAAU,QACjB,kBAAC,EAAWT,KCIHU,EATA,WACb,OACE,6BACE,6CACA,4DCOSC,EAXA,SAAAX,GACb,OACE,4BAAQY,SAAU,SAACC,GAAD,OAAWb,EAAMY,SAASC,EAAMC,OAAOC,SACvD,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,aAAd,eCFAC,EAAU,CACd,CACEX,KAAM,QACNC,OAAQ,6CACRL,MAAO,aACPgB,YAAa,aACbV,iBAAiB,GAEnB,CACEF,KAAM,WACNC,OAAQ,6CACRL,MAAO,aACPgB,YAAa,aACbV,iBAAiB,GAEnB,CACEF,KAAM,MACNC,OAAQ,6CACRL,MAAO,aACPgB,YAAa,aACbV,iBAAiB,GAEnB,CACEF,KAAM,QACNC,OAAQ,6CACRL,MAAO,YACPM,iBAAiB,IA8BNW,EA1BH,WAAM,IAAD,EAEsBC,mBAASH,GAF/B,mBAERI,EAFQ,KAESC,EAFT,KASf,OACE,yBAAKZ,UAAU,OACb,gCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACEG,SAVc,SAACd,GACrB,IAAMwB,EAAeN,EAAQO,QAAO,SAACC,GAAD,OAAaA,EAAOvB,MAAMwB,gBAAkB3B,KAChFuB,EAAUC,OAWR,0BAAMb,UAAU,aACbW,EAAgBM,KAAI,SAAAF,GACnB,OAAO,kBAAC,EAAD,eAAMG,IAAKH,EAAOnB,MAAUmB,UC3CzBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4087ab20.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst houseSelector = houseName => {\n  switch (houseName) {\n    case 'Gryffindor':\n      return 'https://vignette.wikia.nocookie.net/harrypotter/images/0/06/G_final_%281%29.jpg/revision/latest?cb=20121116012731&path-prefix=pt-br'\n    case 'Slytherin':\n      return 'https://vignette.wikia.nocookie.net/harrypotter/images/d/da/S_final.jpg/revision/latest?cb=20120927162347&path-prefix=pt-br'\n    case 'Hufflepuff':\n      return 'https://vignette.wikia.nocookie.net/harrypotter/images/3/3f/H_final.jpg/revision/latest?cb=20121101125148&path-prefix=pt-br'\n    case 'Ravenclaw':\n      return 'https://vignette.wikia.nocookie.net/harrypotter/images/0/07/Ravenclaw_%28S%C3%ADmbolo_Corvinal%29.png/revision/latest?cb=20170324224938&path-prefix=pt-br'\n\n    default:\n      return 'https://vignette.wikia.nocookie.net/harrypotter/images/7/7b/250px-Hogwartscrest.png/revision/latest?cb=20121119233851&path-prefix=pt-br'\n  }\n}\nconst House = props => {\n  const { house } = props\n\n  return (\n    <>\n      <h3>Student from {house}</h3>\n      <img alt={`${house}'s logo`} src={houseSelector(house)} />\n    </>\n  )\n}\n\nHouse.propTypes = {\n  house: PropTypes.string.isRequired,\n}\n\nexport default House\n","import React from 'react'\nimport House from '../house/house'\nimport './wizard.css'\nimport PropTypes from 'prop-types'\n\nconst Wizard = props => {\n  const { name, school, house, dumbledoresArmy } = props\n  const hogwartsName = 'Hogwarts School of Witchcraft and Wizardry'\n  return (\n    <>\n      <h1>{name}</h1>\n\n      {school === hogwartsName ? (\n        <House house={house} />\n      ) : (\n        <img\n          alt='Harry Potter Logo'\n          src='https://www.pngfind.com/pngs/m/113-1138851_hp-logo-png-hp-harry-potter-transparent-png.png'\n        />\n      )}\n      <p>\n        {dumbledoresArmy ? `Dumbledore Army` : `Not part of Dumbledore Army`}\n      </p>\n    </>\n  )\n}\n\nWizard.propTypes = {\n  name: PropTypes.string.isRequired,\n  school: PropTypes.string,\n  house: PropTypes.string,\n  dumbledoresArmy: PropTypes.bool,\n}\nexport default Wizard\n","import React from 'react'\nimport './card.css'\nimport Wizard from '../wizard/wizard'\n\nconst Card = props => {\n  return (\n    <section className='card'>\n      <Wizard {...props} />\n    </section>\n  )\n}\n\nexport default Card\n","import React from 'react'\n\nconst Navbar = () => {\n  return (\n    <nav>\n      <h1>Wizards'World</h1>\n      <label>Sort by Hogwart's house</label>\n    </nav>\n  )\n}\n\nexport default Navbar\n","import React from 'react'\n\nconst Filter = props => {\n  return (\n    <select onChange={(event) => props.onChange(event.target.value)}>\n      <option value='gryffindor'>Gryffindor</option>\n      <option value='hufflepuff'>Hufflepuff</option>\n      <option value='ravenclaw'>Ravenclaw</option>\n      <option value='slytherin'>Slytherin</option>\n    </select>\n  )\n}\n\nexport default Filter\n","import React, { useState } from 'react'\nimport './App.css'\nimport Card from './components/card/card'\nimport Navbar from './components/navbar/navbar'\nimport Filter from './components/filter/filter'\n\nconst wizards = [\n  {\n    name: 'Harry',\n    school: 'Hogwarts School of Witchcraft and Wizardry',\n    house: 'Gryffindor',\n    bloodStatus: 'half-blood',\n    dumbledoresArmy: true,\n  },\n  {\n    name: 'Hermione',\n    school: 'Hogwarts School of Witchcraft and Wizardry',\n    house: 'Gryffindor',\n    bloodStatus: 'half-blood',\n    dumbledoresArmy: true,\n  },\n  {\n    name: 'Ron',\n    school: 'Hogwarts School of Witchcraft and Wizardry',\n    house: 'Gryffindor',\n    bloodStatus: 'pure-blood',\n    dumbledoresArmy: true,\n  },\n  {\n    name: 'Draco',\n    school: 'Hogwarts School of Witchcraft and Wizardry',\n    house: 'Slytherin',\n    dumbledoresArmy: false,\n  },\n]\n\nconst App = ()=> {\n\n  const [filteredWizards, setFilter] = useState(wizards)\n\n  const onFilterHouse = (houseName) => {\n    const filteredList = wizards.filter((wizard) =>  wizard.house.toLowerCase() === houseName)\n    setFilter(filteredList)\n  }\n\n  return (\n    <div className='App'>\n      <header>\n        <Navbar />\n        <Filter\n          onChange={onFilterHouse}\n        />\n      </header>\n      <main className='container'>\n        {filteredWizards.map(wizard => {\n          return <Card key={wizard.name} {...wizard} />\n        })}\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}